************************** BRUTE FORCE ***************************



#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'
#define pb push_back
#define mkp make_pair
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define vi vector<int>
#define pii pair<int, int>
#define vii vector<pii>
#define mi map<int, int>
#define umi unordered_map<int, int>
#define si set<int>
#define ms multiset<int>
#define usi unordered_set<int>
#define lb lower_bound
#define ub upper_bound
template <class T>
using min_pq = priority_queue<T, vector<T>, greater<T>>;
template <class T>
using max_pq = priority_queue<T>;
#define fast_io                       \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL)
#define prDouble(x) cout << fixed << setprecision(6) << x
void if_Solution_Hack_karne_aya_hai_next_sem_fail_hoga()
{
    int n;
    cin >> n;
    vector<vector<int>> v(n, vector<int>(3));
 
    for (int i = 0; i < n; i++)
    {
        cin >> v[i][1] >> v[i][0] >> v[i][2];
    }
    sort(all(v), [](const vector<int> &a, const vector<int> &b)
         {
             return a[0] > b[0]; 
         });
 
    vector<pair<int, int>> nv;
    map<int, int> nh;
    int mn = 1e18;
    for (int i = 0; i < n; i++)
    {
        // mn = min(mn, v[i].ss);
        // nh[v[i].ff] += h[i];
        // if (i == n - 1 || v[i].ff != v[i + 1].ff)
        // {
        //     nv.pb({v[i].ff, mn});
 
        //     mn = 1e18;
        // }
        nh[v[i][0]] += v[i][2];
        mn = min(mn, v[i][1]);
        if (i == n - 1 || v[i][0] != v[i + 1][0])
        {
            nv.pb({v[i][0], mn});
            mn = 1e18;
        }
    }
    int m = nv.size();
    vi dp(m);
    dp[0] = nh[nv[0].ff];
    for (int i = 0; i < m; i++)
    {
        dp[i] = nh[nv[i].first]; 
        for (int j = 0; j < i; j++)
        {
            if (nv[j].second < nv[i].first)
            {
                dp[i] = max(dp[i], dp[j] + nh[nv[i].first]);
            }
        }
    }
 
    cout << *max_element(all(dp)) << endl;
}
signed main()
{
    fast_io;
    int t = 1;
 
    while (t--)
    {
        if_Solution_Hack_karne_aya_hai_next_sem_fail_hoga();
    }
    return 0;
}

******************** OPTIMAL ************************

#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'
#define pb push_back
#define mkp make_pair
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define vi vector<int>
#define pii pair<int, int>
#define vii vector<pii>
#define mi map<int, int>
#define umi unordered_map<int, int>
#define si set<int>
#define ms multiset<int>
#define usi unordered_set<int>
#define lb lower_bound
#define ub upper_bound
template <class T>
using min_pq = priority_queue<T, vector<T>, greater<T>>;
template <class T>
using max_pq = priority_queue<T>;
#define fast_io                       \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL)
#define prDouble(x) cout << fixed << setprecision(6) << x
void if_Solution_Hack_karne_aya_hai_next_sem_fail_hoga()
{
    int n;
    cin >> n;
    vector<vector<int>> v(n, vector<int>(3));
 
    for (int i = 0; i < n; i++)
    {
        cin >> v[i][1] >> v[i][0] >> v[i][2];
    }
    sort(all(v), [](const vector<int> &a, const vector<int> &b)
         { 
            if(a[0]==b[0]) return a[1] > b[1];
            return a[0] > b[0]; });
 
    vector<int> dp(n + 1, 0);
    stack<int> s;
    int ans = 0;
    for (int i = 0; i < n; i++)
    {
        while (!s.empty() && v[s.top()][1] >= v[i][0])
            s.pop();
 
        if (s.empty())
            dp[i] = v[i][2];
        else
            dp[i] = v[i][2] + dp[s.top()];
 
        s.push(i);
 
        ans = max(ans, dp[i]);
    }
 
    cout << ans << endl;
}
signed main()
{
    fast_io;
    int t = 1;
 
    while (t--)
    {
        if_Solution_Hack_karne_aya_hai_next_sem_fail_hoga();
    }
    return 0;
}
